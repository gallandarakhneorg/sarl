[
	{
		"code": "create_functions_must_not_be_abstract",
		"message": "The 'create'-method *func-name* in type *type-name* must not be abstract",
		"cause": "Creation method is inspired from the [factory-method design pattern](https://en.wikipedia.org/wiki/Factory_method_pattern). It is forbidden to define this type of method without code",
		"solution": "Add source code to the creation method",
		"level": "error"
	},
	{
		"code": "create_functions_must_not_be_abstract",
		"message": "'Create'-method *name* is not permitted in an interface",
		"cause": "Creation method is inspired from the [factory-method design pattern](https://en.wikipedia.org/wiki/Factory_method_pattern). It is forbidden to define this type of method inside an interface",
		"solution": "Remove the creation method from the interface and move it in another type",
		"level": "error"
	},
	{
		"code": "dispatch_functions_may_not_widen_inherited_signature",
		"level": "ignore"
	},
	{
		"code": "dispatch_functions_must_not_be_abstract",
		"message": "The dispatch method *fct-name* in type *type-name* must not be abstract",
		"cause": "A dispatch function is a function to which multiple blocks of code are attached to. Each block of code is invoked according to a specific type of the first formal parameter of the dispatch function. Because of this definition, it is forbidden to define, implictly or explicitly, a dispatch function as abstract",
		"solution": "Add block of code for the dispatch function",
		"level": "error"
	},
	{
		"code": "dispatch_functions_mixed_static_and_non_static",
		"message": "Static and non-static dispatch methods can not be mixed",
		"cause": "A dispatch function is a function to which multiple blocks of code are attached to. Each block of code is invoked according to a specific type of the first formal parameter of the dispatch function. It is forbidden to mix static and not static prototypes for a single dispatch function",
		"solution": "Make static or non-static all the prototypes of the same dispatch function",
		"level": "error"
	},
	{
		"code": "dispatch_functions_non_static_expected",
		"message": "The dispatch method must not be static because the dispatch methods in the superclass are not static",
		"cause": "A dispatch function is a function to which multiple blocks of code are attached to. Each block of code is invoked according to a specific type of the first formal parameter of the dispatch function. This error message is generated when a dispatch function into the current type is defined as static function; while the dispatch functions defined into the super-type are not defined as static. You cannot mix static and non-static definitions",
		"solution": "Remove `static` modifier from the prototype of the local dispatch function",
		"level": "error"
	},
	{
		"code": "dispatch_functions_static_expected",
		"message": "The dispatch method must be static because the dispatch methods in the superclass are static",
		"cause": "A dispatch function is a function to which multiple blocks of code are attached to. Each block of code is invoked according to a specific type of the first formal parameter of the dispatch function. This error message is generated when a dispatch function into the current type is not defined as static function; while the dispatch functions defined into the super-type are defined as static. You cannot mix static and non-static definitions",
		"solution": "Add `static` modifier to the prototype of the local dispatch function",
		"level": "error"
	},
	{
		"code": "dispatch_functions_with_different_visibility",
		"message": "All local dispatch methods must have the same visibility",
		"cause": "A dispatch function is a function to which multiple blocks of code are attached to. Each block of code is invoked according to a specific type of the first formal parameter of the dispatch function. It is forbidden to define the different prototypes for a single dispatch function with different visibilities",
		"solution": "Use the same function visility for all the prototypes of the same dispatch function",
		"level": "error"
	},
	{
		"code": "left_hand_side_must_be_variable",
		"message": "Left-hand side of an assignment must be an variable",
		"cause": "The left operand of the assignment operator `=` must be a variable (local, field, or indirect)",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.abstract_method_missing_return_type",
		"level": "ignore"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.abstract_method_with_body",
		"message": "Abstract methods do not specify a body",
		"cause": "You have defined a method within an interface of a capacity with an associated block of code. Since Java 1.8, the default implementation within interfaces (i.e., a block of code that may be considered as the function's implementation if the class implementing the interface is not providing its own code) is introduced. If you are using SARL upon an older Java environment, this error message is generated",
		"solution": "Remove the code block",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.active_annotation_in_same_project",
		"level": "ignore"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.multiple_annotations_used",
		"message": "Multiple annotations of non-repeatable type @*name*. Only annotation types marked @Repeatable can be used multiple times at one target",
		"cause": "By definition, an annotation could be attached multiple times to an element only if it is declared as repeatable with the `@Repeatable` annotation. This issue message is generated when the annotation with the given *name* is attached multiple times to an element, and the annotation `@Repeatable` is not attached to the declaration of the annotation with the given *name*",
		"soluton": "Remove redundant annotations",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.wrong_annotation_target",
		"message": "The annotation @*name* is disallowed for this location",
		"cause": "An annotation is defined in order to be attached to a specific type of element (type, field, method, etc.). This error is generated when an annotation with the given *name* is attached to a wrong type of element",
		"soluton": "Remove the annotation; or replace it by an appropriate annotation",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.wrong_annotation_target",
		"message": "Unexpected annotation to a static constructor",
		"cause": "A static constructor cannot have an annotation attached to it. This issue message is generated when a static constructor is annotated",
		"soluton": "Remove the annotation",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.api_type_inference",
		"level": "ignore"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.constructor_not_permitted",
		"message": "Constructors are only permitted within agents, behaviors, skills, events and classes",
		"cause": "You try to define a construction in a type that cannot contains a constructor construct. Only specific types could contain a constructor. They are basically those that may corresponds to an object-oriented class, e.g. class, agent, behavior and skill",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.constructor_type_params_not_supported",
		"message": "Type parameters are not supported for constructors",
		"cause": "A constructor cannot have generic type parameters",
		"solution": "Remove the generic type parameters",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.constructor_type_params_not_supported",
		"message": "Unexpected type parameter to a static constructor",
		"cause": "A static constructor cannot have generic type parameters",
		"solution": "Remove the generic type parameters",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.case_func_name_starts_with_underscore",
		"message": "A dispatch method's name must not start with an underscore",
		"cause": "A dispatch function is a function to which multiple blocks of code are attached to. Each block of code is invoked according to a specific type of the first formal parameter of the dispatch function. Internally, each block is attached to an hidden function with a name started with an underscore `_` character. In order to avoid any conflict with the internal functions, it is forbidden to start the name of a dispatch function with an underscore character",
		"solution": "Rename your dispatch function",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.case_function_with_type_params",
		"message": "A dispatch method must not declare any type parameters",
		"cause": "A dispatch function is a function to which multiple blocks of code are attached to. Each block of code is invoked according to a specific type of the first formal parameter of the dispatch function. This error message is generated when a generic type parameter is defined in the dispatch function prototype; that is forbidden",
		"solution": "Remove generic type declaration",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.case_function_without_params",
		"message": "A dispatch method must at least have one parameter declared",
		"cause": "A dispatch function is a function to which multiple blocks of code are attached to. Each block of code is invoked according to a specific type of the first formal parameter of the dispatch function. This error message is generated when a dispatch function has no parameter delcared",
		"solution": "Add a formal parameter",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.dispatch_functions_different_primitive_args",
		"message": "Dispatch methods have arguments with different primitive types",
		"cause": "A dispatch function is a function to which multiple blocks of code are attached to. Each block of code is invoked according to a specific type of the first formal parameter of the dispatch function. You could define more formal parameters than the mandatory one. This issue message is generated when the formal parameters at the same position into the prototypes of a dispatch function have not the same primitive type. It may cause issues, e.g., a loose of information due the automatic boxing of the parameter values",
		"solution": "Change the primitive types to have the same in all the prototypes",
		"level": "c/warning"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.dispatch_plain_function_name_clash",
		"message": "Non-dispatch method has same name and number of parameters as dispatch method",
		"cause": "A conflict is detected between the name of a dispatch function and the name of not-dispatching function. In this case, the SARL compiler is still able to invoke both functions. Nevertheless, it introduces an ambiguity for the caller of the functions that may have a call to the wrong function. This issue message notifies you that you have to take care of this situation, and ensure that the calls to functions are targeted the right function code",
		"solution": "Rename the dispatch function; or the non-dispatch function",
		"level": "c/warning"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.dispatch_plain_function_name_clash",
		"message": "Dispatch method has same name and number of parameters as non-dispatch method",
		"cause": "A conflict is detected between the name of a dispatch function and the name of not-dispatching function. In this case, the SARL compiler is still able to invoke both functions. Nevertheless, it introduces an ambiguity for the caller of the functions that may have a call to the wrong function. This issue message notifies you that you have to take care of this situation, and ensure that the calls to functions are targeted the right function code",
		"solution": "Rename the dispatch function; or the non-dispatch function",
		"level": "c/warning"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.field_not_initialized",
		"message": "The blank final field *name* may not have been initialized",
		"cause": "Final fields must be initialized when they are declared, or inside the enclosing type constructor (when writing a constructor is possible). You have declared a final field that is never initialized",
		"solution": "Add initialization value to the field",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.field_not_initialized",
		"message": "The blank final derived field *name* may not have been initialized",
		"cause": "Final fields must be initialized when they are declared, or inside the enclosing type constructor (when writing a constructor is possible). You have declared a final field that is never initialized",
		"solution": "Add initialization value to the field",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.implicit_return",
		"message": "Implicit return",
		"cause": "By default, it is not necessary to specify an explicit `return` statement inside the code block of a function. The SARL compilier assumes that the last executed instruction gives the value to be returned by the function. This issue message is generated when an implicit return is used within a function",
		"solution": "Add an explicit `return`",
		"level": "c/ignore"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.inconsistent_indentation",
		"level": "ignore"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.invalid_annotation_value_type",
		"level": "ignore"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.invalid_extension_type",
		"message": "The primitive type *name* is not a valid extension",
		"cause": "[Extension on fields](./general/Extension.md) is supported by SARL syntax. The purpose is to call the member of an object or a type that is marked by `extension`. A primitive type has no member. Consequently, using the `extension` on a variable of primitive type is impossile",
		"solution": "Remove `extension`; or replace the primitive type by its object-oriented equivalent",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.invalid_member_name",
		"message": "'*name*' is not allowed as member name",
		"cause": "*Name* is reserved by the SARL compiler. They cannot be used for naming your type members",
		"solution": "Change the name of your type member",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.invalid_member_name",
		"message": "Invalid character '*value*' in a member name",
		"cause": "The member name contains the reserved character, usually &#x24;. This character is used by the SARL compiler for naming hidden features and it is forbidden to the SARL developers to use this character in her/his feature names to avoid any collision with the SARL internal features",
		"solution": "Remove the dollar character *value* from the member name",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.invalid_member_name",
		"message": "The nested type *type-name* cannot hide an enclosing type",
		"cause": "You have define an inner type with a *name*. One of the enclosing types has also the same *name*. It is forbidden because it hides the features of the enclosing type from the inner type",
		"solution": "Rename your inner type",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.invalid_member_name",
		"message": "Invalid action name '*name*'. You must not give to an action a name with reserved characters",
		"cause": "You have defined an name for an action/function/method that contains forbidden characters. The major forbidden character is &#x24;. It is not allowed to use it inside a name, even if it is allowed into the Java specification",
		"solution": "Rename your action",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.invalid_modifier",
		"message": "Illegal modifier for the *feature*; only *list-of-modifiers* are permitted",
		"cause": "You have used a modifier that is not allowed. The *list-of-modifiers* shows you the valid modifiers at the place of the issue",
		"solution": "Remove the modifier",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.invalid_modifier",
		"message": "Duplicate modifier for the *name*",
		"cause": "Duplicate modifiers are not allowed",
		"solution": "Remove the duplicate modifier",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.invalid_modifier",
		"message": "The *member-name* can only set one of *modifiers*",
		"cause": "You cannot specify more than one visibility modifier at a time",
		"solution": "Select and use one of the visibility modifiers",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.invalid_modifier",
		"message": "The *member-name* can either be abstract or final, not both",
		"cause": "It is forbidden to declare a function abstract and final at the same time. Indeed, a `final` function disables the function overriding, and an `abstract` function must be always overridden",
		"solution": "Remove one of the two modifiers",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.invalid_modifier",
		"message": "The *member-name* can either be abstract or static, not both",
		"cause": "It is forbidden to declare a function abstract and static at the same time. Indeed, a `static` function cannot be overridden, and an `abstract` function must be always overridden",
		"solution": "Remove one of the two modifiers",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.invalid_modifier",
		"message": "The *member-name* can either be var or val / final, not both",
		"cause": "`var` modifier is for declared a modifiable variable. `val` modifier (or `final val`) is for declaring a unmodifiable variable. You cannot use `var` and `val` at the same time",
		"solution": "Remove one of the two modifiers",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.invalid_modifier",
		"message": "Method *member-name* with a body cannot be abstract",
		"cause": "An abstract function is by definition a function without a body",
		"solution": "Remove the `abstract` modifier; or remove the block of code",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.invalid_modifier",
		"message": "Native methods do not specify a body",
		"cause": "A native function is always implemented by a very-low level library, usually written in C programming language. You cannot provide a block of code for a native function",
		"solution": "Remove the `native` modifier; or remove the block of code",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.invalid_modifier",
		"message": "Abstract method *member-name* cannot be final",
		"cause": "It is forbidden to declare a function abstract and final at the same time. Indeed, a `final` function disables the function overriding, and an `abstract` function must be always overridden",
		"solution": "Remove one of the two modifiers",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.invalid_modifier",
		"message": "Abstract method *member-name* cannot be private",
		"cause": "It is forbidden to declare a function abstract and private at the same time. Indeed, a `private` function cannot be overridden because it is not visible, and an `abstract` function must be always overridden",
		"solution": "Remove one of the two modifiers",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.invalid_modifier",
		"message": "Abstract method *member-name* cannot be static",
		"cause": "It is forbidden to declare a function abstract and static at the same time. Indeed, a `static` function cannot be overridden, and an `abstract` function must be always overridden",
		"solution": "Remove one of the two modifiers",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.invalid_modifier",
		"message": "The field *name* can be either final or volatile, not both",
		"cause": "It is forbidden to declare a field with the both modifiers at the same time. A `final` field does not need synchronization, that is provided by `volatile`",
		"solution": "Remove one of the two modifiers",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.invalid_operator_signature",
		"message": "The static operator '*name*' requires at least one argument",
		"cause": "You try to use the operator *name* without argument, when it requires at least one",
		"solution": "Rewrite the expression with the failing operator",
		"level": "c/error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.invalid_operator_signature",
		"message": "The static operator '*name*' allows at most two arguments",
		"cause": "You try to use the operator *name* without operand, when it requires at least one",
		"solution": "Rewrite the expression with the failing operator",
		"level": "c/error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.invalid_operator_signature",
		"message": "The static unary operator '*name*' requires exactly one argument",
		"cause": "You try to use the operator *name* with a number of operand that is not equal to 1; that is not allowed",
		"solution": "Rewrite the expression with the failing operator",
		"level": "c/error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.invalid_operator_signature",
		"message": "The static binary operator '*name*' requires exactly two arguments",
		"cause": "You try to use the operator *name* with zero or one operand; that is not allowed",
		"solution": "Rewrite the expression with the failing operator",
		"level": "c/error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.invalid_operator_signature",
		"message": "The operator '*name*' allows at most two arguments",
		"cause": "You try to use the operator *name* with more than two operands; that is not allowed",
		"solution": "Rewrite the expression with the failing operator",
		"level": "c/error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.invalid_operator_signature",
		"message": "The unary operator '*name*' allows at most one argument",
		"cause": "You try to use the operator *name* with more than 1 operand; that is not allowed",
		"solution": "Rewrite the expression with the failing operator",
		"level": "c/error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.invalid_operator_signature",
		"message": "The binary operator '*name*' requires at least one argument",
		"cause": "You try to use the operator *name* with zero operand; that is not allowed",
		"solution": "Rewrite the expression with the failing operator",
		"level": "c/error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.invalid_operator_signature",
		"message": "The binary operator '*name*' allows at most two arguments",
		"cause": "You try to use the operator *name* with zero or one operand; that is not allowed",
		"solution": "Rewrite the expression with the failing operator",
		"level": "c/error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.invalid_return_type_in_case_of_junit_annotation",
		"level": "ignore"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.invalid_use_of_static",
		"message": "Create methods can not have type parameters",
		"cause": "Creation method is inspired from the [factory-method design pattern](https://en.wikipedia.org/wiki/Factory_method_pattern). It cannot have generic type parameters",
		"solution": "Remove the generic type parameters",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.invalid_use_of_static",
		"message": "Create methods can not be static",
		"cause": "Creation method is inspired from the [factory-method design pattern](https://en.wikipedia.org/wiki/Factory_method_pattern). It cannot be defined with the `static` modifier",
		"solution": "Remove the `static` modifier",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.invalid_use_of_varArg",
		"message": "A vararg must be the last parameter",
		"cause": "By definition a variadic parameter, e.g., `a : int*`, must be the last formal parameter of a function",
		"solution": "Move the variadic parameter at the last position in the list of the formal parameters",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.invalid_use_of_varArg",
		"message": "A vararg may not be an extension",
		"cause": "By definition a variadic parameter, e.g., `a : int*` is a kind of list of argument values. Since the extension mechanism is associated to a single instance of object, and the variadic parameter may contains more than one, there is an incompatibility between the variadic parameter and the extension mechanism",
		"solution": "Remove the keyword `extension` to the variadic parameter",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.java_doc_linking",
		"message": "sarlDoc: *type-ref* cannot be resolved to a type",
		"cause": "A hyperlink to a type into the Javadoc points to an unknown type named *type-ref*",
		"solution": "Change the *type-name*",
		"level": "d/org.eclipse.jdt.core.compiler.problem.invalidJavadoc/ignore"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.jdk_not_on_classpath",
		"message": "SARL compiler couldn't be executed on the JDK version *current-version*. Please use the JDK greater than or equal to *min-version* AND strictly lower than *max-version*",
		"cause": "SARL needs a specific version of the Java Development Kit (JDK) in order to be executed. The *current-version* of the JDK is not compatible with SARL. It is recommended to use a JDK version between *min-version* (inclusive) and *max-version* (exclusive)",
		"solution": "Run SARL with an appropriate JDK version",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.jdk_not_on_classpath",
		"message": "Couldn't find a valid version of the JDK in the classpath. The generator configuration specifies the version *current-version*. Please change the configuration in order to use a version greater than or equal to *min-version* AND strictly lower than *max-version*",
		"cause": "SARL needs a specific version of the Java Development Kit (JDK) in order to be executed. The *current-version* of the JDK that is used for compiling your SARL project is not compatible with SARL. It is recommended to use a JDK version between *min-version* (inclusive) and *max-version* (exclusive)",
		"solution": "Change the configuration of your SARL project for using an appropriate JDK version",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.missing_abstract",
		"message": "The abstract method *func-name* in type *type-name* can only be defined by an abstract class",
		"cause": "An abstract method/function is a function without block of code. The keyword `abstract` could be missed on a function only if the enclosing type is defined as abstract too",
		"solution": "Add the modifier `abstract` into the prototype of *func-name*",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.missing_abstract",
		"message": "The method *func-name* in type *type-name* should be declared abstract",
		"cause": "An abstract method/function is a function without block of code. The keyword `abstract` could be missed but it is a good practice to specify it explicitle. This warning is generated to notify you that an `abstract` is missed and may be added to the function prototype",
		"solution": "Add the modifier `abstract` into the prototype of *func-name*",
		"level": "warning"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.missing_abstract_in_anonymous",
		"message": "The abstract method *func-prototype* in type *type-name* can only be defined by an abstract class",
		"cause": "It is forbidden to define an abstract function into an anonymous class",
		"solution": "Add block of code for the function with prototype *func-prototype*",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.missing_override",
		"message": "The method *func-prototype* of type *type-name* should use override keyword since it actually overrides a supertype method",
		"cause": "A function with the prototype *func-prototype* is defined into the type *type-name*. The same function prototype is defined into and inherited from a super-type. A good practice is to replace the `def` keyword by `override` in order to make explicit the fact that the function into *type-name* overrides another function",
		"level": "c/ignore"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.missing_static_modifier",
		"message": "Potential missing of the *name* modifier. This function has the same name as the main function of the program and therefore should be declared with this modifier",
		"cause": "You have declared a function that has the same name as the usual main function of the program. If it is the main function, the modifier *name* is mandatory",
		"solution": "Add *name* modifier to the function",
		"level": "c/error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.missing_static_modifier",
		"message": "Nested classes must be static",
		"cause": "SARL specification forces to have static inner classes due to implementation of Xtext/Xtend",
		"solution": "Add `static` modifier to the nested class",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.missing_abstract_modifier",
		"message": "The class '*name*' is not declared abstract",
		"cause": "The name of the class starts with the word `Abstract`, and the class has not the `abstract` modifier. Because the term \"abstract\" is part of the name of the class, it is a good practice to declare the class as abstract",
		"solution": "Add `abstract` modifier to the class; or remove \"Abstract\" from *name*",
		"level": "c/warning"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.obsolete_annotation_override",
		"message": "Superfluous @Override annotation",
		"cause": "From JAva language API, the annotation `@Override` is defined in order to mark a function as a function that is overridding another function. The usage of this annotation is not recommended, even it is still possible. This warning message is generated when the function is already defined with the `override` keyword, and annotated with `@Override`. In this case, the annotation is superfluous",
		"solution": "Remove `@Override`",
		"level": "warning"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.obsolete_override",
		"message": "The method *func-prototype* of type *type-name* shadows the method *other-prototype* of type *other-type*, but does not override it",
		"cause": "You have used the keyword `override` for declaring the function with prototype *func-prototype*. Since the function in *type-name* is not overriding a function from *other-type* with the same erasure, but with differences into the prototype such that your function is hidding the function of *other-type*. You function should be defined with `def` instead of `overrride`",
		"solution": "Replace `override` by `def`",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.obsolete_override",
		"message": "The method *func-prototype* of type *type-name* must override a superclass method",
		"cause": "You have used the keyword `override` for declaring the function with prototype *func-prototype*. Since the function in *type-name* is not overriding a function from the super type with the same erasure, but this latter does not exist",
		"solution": "Replace `override` by `def`",
		"level": "error"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.orphan_element",
		"level": "ignore"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.processing_error",
		"level": "ignore"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.ternary_if_operator_is_not_allowed",
		"message": "The ternary operator is not allowed. Use a normal if-expression",
		"cause": "The ternary operator is the inline if-then-else expression. In some best programming practices, the inline if-then-else are considered as a bad practice. This issue message is generated when an ternary operator is used in your code",
		"solution": "Replace the ternary operator by the equivalent if-then-else statement",
		"level": "c/ignore"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.unnecessary_modifier",
		"message": "The *name* modifier is unnecessary on *member-name*",
		"cause": "This issue message is generated when the modifier *name* is specified on a member that has a default visibility equals to *name*",
		"solution": "Remove the *name* modifier",
		"level": "c/warning"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.unused_private_member",
		"message": "The extension *name* is not used in *type*",
		"cause": "This warning is generated because you have declared to use an extension field with *name* in the given *type* that is never used. This is not a problem for running your program. But, it makes your binary executable file larger than stricly necessary",
		"solution": "Remove the extension",
		"level": "d/org.eclipse.jdt.core.compiler.problem.unusedPrivateMember/warning"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.unused_private_member",
		"message": "The extension *type*.*name* is not used",
		"cause": "This warning is generated because you have declared to use an extension with *name* in the given *type* that is never used. This is not a problem for running your program. But, it makes your binary executable file larger than stricly necessary",
		"solution": "Remove the extension",
		"level": "d/org.eclipse.jdt.core.compiler.problem.unusedPrivateMember/warning"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.unused_private_member",
		"message": "The value of the field *type*.*name* is not used",
		"cause": "This warning is generated because you have defined a private field with *name* in the given *type* that is never used. This is not a problem for running your program. But, it makes your binary executable file larger than stricly necessary",
		"solution": "Remove the private field",
		"level": "d/org.eclipse.jdt.core.compiler.problem.unusedPrivateMember/warning"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.unused_private_member",
		"message": "The method *func-prototype* from the type *type-name* is never used locally",
		"cause": "This warning is generated because you have defined a private function that is never called. This is not a problem for running your program. But, it makes your binary executable file larger than stricly necessary",
		"solution": "Remove the private function",
		"level": "d/org.eclipse.jdt.core.compiler.problem.unusedPrivateMember/warning"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.wrong_file",
		"level": "ignore"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.wrong_package",
		"level": "ignore"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.xbase_lib_not_on_classpath",
		"level": "ignore"
	},
	{
		"code": "org.eclipse.xtend.core.validation.IssueCodes.single_case_function",
		"message": "Single dispatch method",
		"cause": "This issue is generated because you have defined a single function to be a dispatch function. It is not efficient to have a single function to be invoked in the definition of a dispatch function",
		"solution": "Remove the dispatch keyword",
		"level": "c/warning"
	}
]

