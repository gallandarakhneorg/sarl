AbstractSARLSubValidator_1=''{0}'' is not allowed as member name
AbstractSARLSubValidator_2=Invalid character ''{0}'' in a member name
AbstractSARLSubValidator_3= or 
AbstractSARLSubValidator_4=<null>
AbstractSARLSubValidator_5=field {0}
AbstractSARLSubValidator_6=extension field {0}
AbstractSARLSubValidator_7=action {0}
AbstractSARLSubValidator_8=method {0}
AbstractSARLSubValidator_9=''{0}'' is not a valid identifier
SARLAnnotationValidator_1=Discouraged use of reserved annotation. @{0} is an annotation that is reserved for the compiler usage
SARLAnnotationValidator_2=Discouraged manual definition of an inline expression. Inline expression definition is reserved for advanced usage
SARLAnnotationValidator_3=Invalid annotation value. {1} is not an implementation of {0}
SARLAnnotationValidator_4=Invalid annotation value. It must be a type literal to a skill
SARLAnnotationValidator_5=The annotation @{0} is disallowed for this location
SARLAnnotationValidator_6=Forbidden annotation in a SARL program
SARLAnnotationValidator_7=Forbidden annotation to the object-oriented type {0}
SARLAnnotationValidator_8=Forbidden annotation to the agent-oriented type {0}
SARLAnnotationValidator_9=Multiple annotations of non-repeatable type @{0}. Only annotation types marked @Repeatable can be used multiple times at one target
SARLBehaviorUnitValidator_1=Expression with side effect is not allowed in guards
SARLBehaviorUnitValidator_2=Discouraged boolean value. The guard is always true
SARLBehaviorUnitValidator_3=Dead code. The guard is always false
SARLBehaviorUnitValidator_4=Type mismatch: cannot convert from {0} to {1}
SARLBehaviorUnitValidator_5=Possible invalid usage of ''{0}''. An impure function is detected into the sequence of calls on ''{0}''. \
Because an impure function has a possible side effect and side effect is not allowed on ''{0}'', it may cause an unexpected or invalid \
running behavior. You have to ensure by yourself that the usage of ''{0}'' is valid
SARLBehaviorUnitValidator_6=Invalid use of the unmodifiable feature ''{0}''. You cannot use ''{0}'' at the left-side of an assignment operator
SARLBehaviorUnitValidator_7=Possible invalid usage of ''{0}''. The value of the feature ''{0}'' or one of its component seems to \
be copied within a local variable. Because side effect is not allowed on ''{0}'', it may cause an unexpected or invalid \
running behavior. You have to ensure by yourself that the usage of ''{0}'' is valid
SARLBehaviorUnitValidator_8=Invalid use of the unmodifiable feature ''{0}''. You cannot use ''{0}'' as the operand of a postfix operator because it causes a side effect
SARLBehaviorUnitValidator_9=Possible invalid usage of ''{0}''. The value of the feature ''{0}'' or one of its component is used \
as an argument of a function. This function is not marked as a pure function, i.e. without side effect. Because side \
effect is not allowed on ''{0}'', it may cause an unexpected or invalid running behavior. You have to ensure by \
yourself that the usage of ''{0}'' is valid
SARLBehaviorUnitValidator_10=events
SARLBehaviorUnitValidator_11=Invalid type: ''{0}''. Only {1} can be used after the keyword ''{2}''
SARLCastValidator_1=Potential inefficient value conversion. This operation is based on a call to the function ''{0}'', which may cause inefficient code execution
SARLCastValidator_2=Potential inefficient value conversion. This operation is based on a call to the function ''{0}'', which generates a value of type ''{2}'' that is converted on-the-fly to ''{1}''
SARLCastValidator_3=Unnecessary cast from {0} to {1}
SARLDocumentationValidator_1=sarlDoc: {0} cannot be resolved to a type
SARLFeatureCallsValidator_1=Forbidden feature call: {0}
SARLFeatureCallsValidator_2=Discouraged feature call: {0}. You should use the dedicated language keyword, or an agent''s capacity in place of this feature call
SARLFeatureCallsValidator_3=Potential ambiguous notation for {0}. The minus unary operator is applied on the result of the call to function {1} and not on the argument value {2}
SARLFeatureCallsValidator_4=Discouraged use of the {0} keyword inside a basic loop
SARLFeatureCallsValidator_5=Invalid use of the {0} keyword. It could only be used inside loops
SARLFeatureCallsValidator_6=Unexpected assertion due to its positive test result
SARLFeatureCallsValidator_7=The statement ''{0}'' is not yet supported by the SARL compiler
SARLFeatureCallsValidator_8=Type mismatch: cannot convert from {0} to {1}
SARLFeatureCallsValidator_9=The static operator ''{0}'' requires at least one argument
SARLFeatureCallsValidator_10=The static operator ''{0}'' allows at most two arguments
SARLFeatureCallsValidator_11=The static unary operator ''{0}'' requires exactly one argument
SARLFeatureCallsValidator_12=The static binary operator ''{0}'' requires exactly two arguments
SARLFeatureCallsValidator_13=The operator ''{0}'' allows at most two arguments
SARLFeatureCallsValidator_14=The unary operator ''{0}'' allows at most one argument
SARLFeatureCallsValidator_15=The binary operator ''{0}'' requires at least one argument
SARLFeatureCallsValidator_16=The binary operator ''{0}'' allows at most two arguments
SARLFeatureCallsValidator_17=Left-hand side of an assignment must be an variable
SARLFeatureCallsValidator_18=The ternary operator is not allowed. Use a normal if-expression
SARLFeatureModifierValidator_1=definition of {0}''s constructor
SARLFeatureModifierValidator_2=Constructors are only permitted within agents, behaviors, skills, events and classes
SARLFeatureModifierValidator_3=definition of {0} in {1}
SARLFeatureModifierValidator_4=The field {0} can be either final or volatile, not both
SARLFeatureModifierValidator_5=Method {0} with a body cannot be abstract
SARLFeatureModifierValidator_6=Native methods do not specify a body
SARLFeatureModifierValidator_7=Abstract method {0} cannot be final
SARLFeatureModifierValidator_8=Abstract method {0} cannot be private
SARLFeatureModifierValidator_9=Abstract method {0} cannot be static
SARLFeatureModifierValidator_10=Method {0} with a body cannot be abstract
SARLFeatureModifierValidator_11=definition of {0}
SARLFeatureModifierValidator_12=Nested classes must be static
SARLFeatureModifierValidator_13=Potential problem of data sharing outside the control of the agent. The field ''{0}'' is declared with the static modifier. It enables the code to change the field value outside a direct control of the agent; that is breaking partly the agent autonomy principle
SARLInheritanceValidator_1=The feature ''{0}'' is already implemented by the super-type ''{1}''
SARLInheritanceValidator_2=Duplicate implemented feature ''{0}''
SARLInheritanceValidator_3=Invalid supertype. Expecting {0}
SARLInheritanceValidator_4=an interface
SARLInheritanceValidator_5=a class
SARLInheritanceValidator_6=Attempt to override final class
SARLInheritanceValidator_7=Supertype must be a subtype of ''{0}''
SARLInheritanceValidator_8=Supertype must be of type ''{0}''
SARLInheritanceValidator_9=The inheritance hierarchy of {0} contains cycles
SARLInheritanceValidator_10=Invalid implemented type: ''{0}''. Only subtypes of ''{1}'' are allowed for ''{2}''
SARLInheritanceValidator_11=Invalid implemented type: ''{0}''. Only the type ''{1}'' and one of its subtypes are allowed for ''{2}''
SARLInheritanceValidator_12=Missing implemented type ''{0}'' for ''{1}''
SARLInheritanceValidator_13=The type {0} cannot extend or implement {1}. A supertype may not specify any wildcard
SARLInheritanceValidator_14=The nested type {0} cannot hide an enclosing type
SARLInheritanceValidator_15=Duplicate extension with same type
SARLInheritanceValidator_16=The method {0} of type {1} must override a superclass method
SARLInheritanceValidator_17=Superfluous @Override annotation
SARLInheritanceValidator_18=The method {0} of type {1} should use override keyword since it actually overrides a supertype method
SARLInheritanceValidator_19=The method {0} of type {1} shadows the method {2} of type {3}, but does not override it
SARLInheritanceValidator_20=Expecting the return type {0}. It is recommended to write the return type, even if it is inferred from the overridden function
SARLInheritanceValidator_21=Attempt to override final method {0}
SARLInheritanceValidator_22=Cannot reduce the visibility of the overridden method {0}
SARLInheritanceValidator_23=The return type is incompatible with {0}
SARLInheritanceValidator_24=The overridden method is synchronized, the current one is not synchronized
SARLMemberValidator_1=The statement ''{0}'' is not yet supported by the SARL compiler
SARLMemberValidator_2=The firing declaration of the event {0} is not considered by the SARL compiler. Only early-exit events are considered
SARLMemberValidator_3=Invalid type: ''{0}''. Only {1} can be used after the keyword ''{2}''
SARLMemberValidator_4=capacities
SARLMemberValidator_5=events
SARLMemberValidator_6=No default constructor in super type {0}. Another constructor must be invoked explicitly
SARLMemberValidator_7=Undefined type for the formal parameter {0}
SARLMemberValidator_8=Undefined type for the default value of the formal parameter {0}
SARLMemberValidator_9=Type mismatch: cannot convert from {0} to {1}
SARLMemberValidator_10=Default value''s expression cannot reference the not-pure operation: {0}
SARLMemberValidator_11=Forbidden reference to not final field {0} from a constructor''s default value expression
SARLMemberValidator_12=Redundant definition of the default value for the formal parameter {0}
SARLMemberValidator_13=Illegal redefinition of the default value for the formal parameter {0}. Inherited value is: {1}. While the current value is: {2}
SARLMemberValidator_14=Unnecessary use of the capacity ''{0}'' because it is implemented by the current skill
SARLMemberValidator_15=The capacity ''{0}'' is not used
SARLMemberValidator_16=Redundant use of the capacity ''{0}''
SARLMemberValidator_17=The method {0}{1} from the type {2} is never used locally
SARLMemberValidator_18=Unexpected annotation to a static constructor
SARLMemberValidator_19=Unexpected type parameter to a static constructor
SARLMemberValidator_20=Unexpected formal parameter to a static constructor
SARLMemberValidator_21=Unexpected exception to a static constructor
SARLMemberValidator_22=Missing code for a static constructor
SARLMemberValidator_23=Abstract methods do not specify a body
SARLMemberValidator_24=''Create''-method {0} is not permitted in an interface
SARLMemberValidator_25=The method {0} in type {1} should be declared abstract
SARLMemberValidator_26=The abstract method {0} in type {1} can only be defined by an abstract class
SARLMemberValidator_27=The dispatch method {0} in type {1} must not be abstract
SARLMemberValidator_28=The ''create''-method {0} in type {1} must not be abstract
SARLMemberValidator_29=The primitive type {0} is not a valid extension
SARLMemberValidator_30={0} uses the raw type {1}. References to generic type {2} should be parameterized
SARLMemberValidator_31=The inferred field type 
SARLMemberValidator_32=The inferred return type
SARLMemberValidator_33=A vararg may not be an extension
SARLMemberValidator_34=A vararg must be the last parameter
SARLMemberValidator_35=Duplicate parameter {0}
SARLMemberValidator_36=Duplicate implicit parameter ''{0}''
SARLMemberValidator_37=A dispatch method must at least have one parameter declared
SARLMemberValidator_38=A dispatch method must not declare any type parameters
SARLMemberValidator_39=A dispatch method's name must not start with an underscore
SARLMemberValidator_40=Return is not allowed in creation expression
SARLMemberValidator_41=void is an invalid type for the create method {0}
SARLMemberValidator_42=Create method {0} may not declare return type void
SARLMemberValidator_43=The inherited return type void of {0} is invalid for create method
SARLMemberValidator_44=Create methods can not have type parameters
SARLMemberValidator_45=Create methods can not be static
SARLMemberValidator_46=The extension {0} is not used in {1}
SARLMemberValidator_47=The extension {0}.{1} is not used
SARLMemberValidator_48=The value of the field {0}.{1} is not used
SARLMemberValidator_49=Type parameters are not supported for constructors
SARLMemberValidator_50=The field {0} needs an explicit type since there is no initialization expression to infer the type from
SARLMemberValidator_51='self' is a discouraged name
SARLMemberValidator_52=Implicit return
SARLModifierValidator_1=The {0} modifier is unnecessary on {1}
SARLModifierValidator_2=Illegal modifier for the {0}; only {1} are permitted
SARLModifierValidator_3=Duplicate modifier for the {0}
SARLModifierValidator_4=and
SARLModifierValidator_5=or
SARLModifierValidator_6=The {0} can only set one of {1}
SARLModifierValidator_7=The {0} can either be abstract or final, not both
SARLModifierValidator_8=The {0} can either be abstract or static, not both
SARLModifierValidator_9=The {0} can either be abstract or static, not both
SARLModifierValidator_10=The {0} can either be abstract or final, not both
SARLModifierValidator_11=The {0} can either be var or val / final, not both
SARLModifierValidator_12=The class ''{0}'' is not declared abstract
SARLNamingValidator_1=Invalid action name ''{0}''. You must not give to an action a name with reserved characters
SARLNamingValidator_2=Invalid name ''{0}''. You must not give to {1} a name with reserved characters
SARLNamingValidator_3=a field
SARLNamingValidator_4=Invalid name ''{0}''. You must not give to {1} the same name as a reserved keyword
SARLNamingValidator_5=The generic type parameter ''{0}'' is hiding the generic type parameter of ''{1}''
SARLNamingValidator_6=The field ''{0}'' in ''{1}'' is hidding the inherited field ''{2}''
SARLNamingValidator_7=a formal parameter
SARLNamingValidator_8=a variable
SARLScriptValidator_1=SARL compiler couldn''t be executed on the JDK version {0}. Please use the JDK greater than or equal to {1} AND strictly lower than {2}
SARLScriptValidator_2=Couldn''t find a valid version of the JDK in the classpath. The generator configuration specifies the version {0}. Please change the configuration in order to use a version greater than or equal to {1} AND strictly lower than {2}
SARLScriptValidator_3=SARL library not found on the classpath. Error code: {0}; Resources on classpath are:\n{1}\nDeclared fields in SARLVersion class:\n{2}
SARLScriptValidator_4=Incompatible SARL library on the classpath. Actual: {0}. Expected: {1}
SARLScriptValidator_5=Duplicate type {0}
SARLSynchronizationValidator_1=The field {0} should be synchronized for avoiding value inconsistency due to parallel execution
SARLTypeValidator_1=The statement ''{0}'' is not yet supported by the SARL compiler
SARLTypeValidator_2=Nested agents are not allowed inside {0}
SARLTypeValidator_3=Nested behaviors are not allowed inside {0}
SARLTypeValidator_4=Nested capacities are not allowed inside {0}
SARLTypeValidator_5=Nested skills are not allowed inside {0}
SARLTypeValidator_6=Nested events are not allowed inside {0}
SARLTypeValidator_7=Discouraged capacity definition. A capacity without actions defined inside is not useful since it cannot be called by an agent or a behavior
SARLTypeValidator_8=Non-dispatch method has same name and number of parameters as dispatch method
SARLTypeValidator_9=Dispatch method has same name and number of parameters as non-dispatch method
SARLTypeValidator_10=Synthetic dispatch method reduces visibility of overridden method {0}
SARLTypeValidator_11=Single dispatch method
SARLTypeValidator_12=The dispatch method must be static because the dispatch methods in the superclass are static
SARLTypeValidator_13=The dispatch method must not be static because the dispatch methods in the superclass are not static
SARLTypeValidator_14=Incompatible return type of dispatch method. Expected {0} but was {1}
SARLTypeValidator_15=All local dispatch methods must have the same visibility
SARLTypeValidator_16=Static and non-static dispatch methods can not be mixed
SARLTypeValidator_17=Dispatch methods have arguments with different primitive types
SARLTypeValidator_18=Duplicate dispatch methods. Primitives cannot overload their wrapper types in dispatch methods
