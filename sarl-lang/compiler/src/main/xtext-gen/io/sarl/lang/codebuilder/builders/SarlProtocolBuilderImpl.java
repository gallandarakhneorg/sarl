/*
 * $Id$
 *
 * File is automatically generated by the Xtext language generator.
 * Do not change it.
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2024 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.lang.codebuilder.builders;

import com.google.inject.Inject;
import com.google.inject.Provider;
import io.sarl.lang.sarl.SarlFactory;
import io.sarl.lang.sarl.SarlProtocol;
import io.sarl.lang.sarl.SarlScript;
import java.util.function.Predicate;
import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtend.core.xtend.XtendFactory;
import org.eclipse.xtext.common.types.JvmDeclaredType;
import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;
import org.eclipse.xtext.common.types.JvmTypeReference;
import org.eclipse.xtext.common.types.access.IJvmTypeProvider;
import org.eclipse.xtext.util.EmfFormatter;
import org.eclipse.xtext.util.Strings;
import org.eclipse.xtext.xbase.compiler.DocumentationAdapter;
import org.eclipse.xtext.xbase.lib.Pure;

/** Builder of a Sarl SarlProtocol.
	 * @see TopElementBuilderFragment.java : appendTo : 400
 */
@SuppressWarnings("all")
public class SarlProtocolBuilderImpl extends AbstractBuilder implements ISarlProtocolBuilder {

	private SarlProtocol sarlProtocol;

	/**
	 * @see TopElementBuilderFragment.java : appendTo : 1342
	 */
	@Override
	@Pure
	public String toString() {
		return EmfFormatter.objToStr(getSarlProtocol());
	}

	/** Initialize the Ecore element when inside a script.
	 * @param script the SARL script in which this SarlProtocol is added.
	 * @param name the simple name of the SarlProtocol.
	 * @param context the context in which the resolution of types must be done.
	 * @see TopElementBuilderFragment.java : appendTo : 1379
	 */
	public void eInit(SarlScript script, String name, IJvmTypeProvider context) {
		setTypeResolutionContext(context);
		if (this.sarlProtocol == null) {
			this.sarlProtocol = SarlFactory.eINSTANCE.createSarlProtocol();
			this.sarlProtocol.setAnnotationInfo(XtendFactory.eINSTANCE.createXtendTypeDeclaration());
			this.sarlProtocol.setName(name);
			script.getXtendTypes().add(this.sarlProtocol);
		}
	}

	/** Replies the generated SarlProtocol.
	 * @see TopElementBuilderFragment.java : appendTo : 1515
	 */
	@Pure
	public SarlProtocol getSarlProtocol() {
		return this.sarlProtocol;
	}

	/** Replies the reference to the generated SarlAgent.
	 * @since 0.15
	 * @see TopElementBuilderFragment.java : appendTo : 1555
	 */
	@Pure
	public JvmTypeReference getSarlProtocolReference() {
		SarlProtocol ecoreObject = getSarlProtocol();
		return getTypeReferenceFor(ecoreObject);
	}

	/** Replies the JVM declared type for this generated SarlProtocol.
	 * @return the type, never {@code null}.
	 * @since 0.15
	 * @see TopElementBuilderFragment.java : appendTo : 1610
	 */
	@Pure
	public JvmDeclaredType getJvmDeclaredType() {
		return getAssociatedElement(JvmDeclaredType.class, getSarlProtocol(), eResource(), true);
	}

	/** Replies the resource to which the SarlProtocol is attached.
	 * @see TopElementBuilderFragment.java : appendTo : 1645
	 */
	@Pure
	public Resource eResource() {
		return getSarlProtocol().eResource();
	}

	/** Change the documentation of the element.
	 *
	 * <p>The documentation will be displayed just before the element.
	 *
	 * @param doc the documentation.
	 * @return {@code this}.
	 * @see AbstractSubCodeBuilderFragment.java : appendTo : 602
	 */
	public ISarlProtocolBuilder setDocumentation(String doc) {
		if (Strings.isEmpty(doc)) {
			getSarlProtocol().eAdapters().removeIf(new Predicate<Adapter>() {
				public boolean test(Adapter adapter) {
					return adapter.isAdapterForType(DocumentationAdapter.class);
				}
			});
		} else {
			DocumentationAdapter adapter = (DocumentationAdapter) EcoreUtil.getExistingAdapter(
					getSarlProtocol(), DocumentationAdapter.class);
			if (adapter == null) {
				adapter = new DocumentationAdapter();
				getSarlProtocol().eAdapters().add(adapter);
			}
			adapter.setDocumentation(doc);
		}
		return this;
	}

	/** Add a modifier.
	 * @param modifier the modifier to add.
	 * @return {@code this}.
	 * @see TopElementBuilderFragment.java : appendTo : 2209
	 */
	public ISarlProtocolBuilder addModifier(String modifier) {
		if (!Strings.isEmpty(modifier)) {
			this.sarlProtocol.getModifiers().add(modifier);
		}
		return this;
	}

	/**
	 * @see TopElementBuilderFragment.java : appendTo : 499
	 */
	@Inject
	private Provider<ISarlProtocolParameterBuilder> iSarlProtocolParameterBuilderProvider;

	/** Create a SarlProtocolParameter.
	 * @param name the name of the SarlProtocolParameter.
	 * @return the builder.
	 * @see TopElementBuilderFragment.java : appendTo : 540
	 */
	public ISarlProtocolParameterBuilder addSarlProtocolParameter(String name) {
		ISarlProtocolParameterBuilder builder = this.iSarlProtocolParameterBuilderProvider.get();
		builder.eInit(getSarlProtocol(), name, getTypeResolutionContext());
		return builder;
	}

	/**
	 * @see TopElementBuilderFragment.java : appendTo : 499
	 */
	@Inject
	private Provider<ISarlProtocolCallBuilder> iSarlProtocolCallBuilderProvider;

	/** Create a SarlProtocolCall.
	 * @param name the type of the SarlProtocolCall.
	 * @return the builder.
	 * @see TopElementBuilderFragment.java : appendTo : 540
	 */
	public ISarlProtocolCallBuilder addSarlProtocolCall(String name) {
		ISarlProtocolCallBuilder builder = this.iSarlProtocolCallBuilderProvider.get();
		builder.eInit(getSarlProtocol(), name, getTypeResolutionContext());
		return builder;
	}

	/** Create a SarlProtocolCall.
	 * @param name the type of the SarlProtocolCall.
	 * @return the builder.
	 * @see TopElementBuilderFragment.java : appendTo : 602
	 */
	public ISarlProtocolCallBuilder addSarlProtocolCall(JvmParameterizedTypeReference name) {
		ISarlProtocolCallBuilder builder = this.iSarlProtocolCallBuilderProvider.get();
		builder.eInit(getSarlProtocol(), name, getTypeResolutionContext());
		return builder;
	}

	/**
	 * @see TopElementBuilderFragment.java : appendTo : 499
	 */
	@Inject
	private Provider<ISarlProtocolMessageBuilder> iSarlProtocolMessageBuilderProvider;

	/** Create a SarlProtocolMessage.
	 * @param name the name of the SarlProtocolMessage.
	 * @return the builder.
	 * @see TopElementBuilderFragment.java : appendTo : 540
	 */
	public ISarlProtocolMessageBuilder addSarlProtocolMessage(String name) {
		ISarlProtocolMessageBuilder builder = this.iSarlProtocolMessageBuilderProvider.get();
		builder.eInit(getSarlProtocol(), name, getTypeResolutionContext());
		return builder;
	}

}

