/*
 * $Id$
 *
 * File is automatically generated by the Xtext language generator.
 * Do not change it.
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2024 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.lang.codebuilder.builders;

import com.google.inject.Inject;
import com.google.inject.Provider;
import io.sarl.lang.sarl.SarlFactory;
import io.sarl.lang.sarl.SarlProtocolCall;
import java.util.function.Predicate;
import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtend.core.xtend.XtendFactory;
import org.eclipse.xtend.core.xtend.XtendTypeDeclaration;
import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;
import org.eclipse.xtext.common.types.JvmTypeReference;
import org.eclipse.xtext.common.types.access.IJvmTypeProvider;
import org.eclipse.xtext.util.EmfFormatter;
import org.eclipse.xtext.util.Strings;
import org.eclipse.xtext.xbase.compiler.DocumentationAdapter;
import org.eclipse.xtext.xbase.lib.Pure;

/** Builder of a Sarl SarlProtocolCall.
 * AbstractMemberBuilderFragment.java : appendTo : 154 */
@SuppressWarnings("all")
public class SarlProtocolCallBuilderImpl extends AbstractBuilder implements ISarlProtocolCallBuilder {

	/**
	 * @see AbstractMemberBuilderFragment.java : appendTo : 358
	 */
	private EObject container;

	/**
	 * @see AbstractMemberBuilderFragment.java : appendTo : 364
	 */
	private SarlProtocolCall sarlProtocolCall;

	/**
	 * @see AbstractMemberBuilderFragment.java : appendTo : 382
	 */
	@Inject
	private Provider<ISarlProtocolParameterBuilder> sarlProtocolParameterBuilderProvider;

	/** Initialize the Ecore element.
	 * @param container the container of the SarlProtocolCall.
	 * @param name the type of the SarlProtocolCall.
	 * @param context the context in which type resolution must be applied.
	 * @see AbstractMemberBuilderFragment.java : appendTo : 629
	 */
	public void eInit(EObject container, String name, IJvmTypeProvider context) {
		// Generator code: AbstractMemberBuilderFragment.java : appendTo : 663
		if (this.sarlProtocolCall == null) {
			this.sarlProtocolCall = SarlFactory.eINSTANCE.createSarlProtocolCall();
			internalEInit(container, context);
			JvmTypeReference ref = newTypeRef(container, name);
			if (ref instanceof JvmParameterizedTypeReference pref) {
				this.sarlProtocolCall.setName(pref);
			} else {
				throw new IllegalArgumentException(name);
			}
		}
	}

	/** Initialize the Ecore element.
	 * @param container the container of the SarlProtocolCall.
	 * @param name the type of the SarlProtocolCall.
	 * @param context the context in which type resolution must be applied.
	 * @see AbstractMemberBuilderFragment.java : appendTo : 813
	 */
	public void eInit(EObject container, JvmParameterizedTypeReference name, IJvmTypeProvider context) {
		// Generator code: AbstractMemberBuilderFragment.java : appendTo : 843
		if (this.sarlProtocolCall == null) {
			this.sarlProtocolCall = SarlFactory.eINSTANCE.createSarlProtocolCall();
			internalEInit(container, context);
			this.sarlProtocolCall.setName(name);
		}
	}

	private void internalEInit(EObject container, IJvmTypeProvider context) {
		// Generator code: AbstractMemberBuilderFragment.java : appendTo : 916
		assert this.sarlProtocolCall != null;
		setTypeResolutionContext(context);
		this.container = container;
		this.sarlProtocolCall.setAnnotationInfo(XtendFactory.eINSTANCE.createXtendMember());
		if (container instanceof XtendTypeDeclaration typeDeclaration) {
			typeDeclaration.getMembers().add(this.sarlProtocolCall);
			this.sarlProtocolCall.setDeclaringType(typeDeclaration);
		}
	}

	/** Replies the generated element.
	 * @see AbstractMemberBuilderFragment.java : appendTo : 959
	 */
	@Pure
	public SarlProtocolCall getSarlProtocolCall() {
		return this.sarlProtocolCall;
	}

	/** Replies the resource.
	 * @see AbstractMemberBuilderFragment.java : appendTo : 993
	 */
	@Pure
	public Resource eResource() {
		return getSarlProtocolCall().eResource();
	}

	/** Change the documentation of the element.
	 *
	 * <p>The documentation will be displayed just before the element.
	 *
	 * @param doc the documentation.
	 * @return {@code this}.
	 * @see AbstractSubCodeBuilderFragment.java : appendTo : 602
	 */
	public ISarlProtocolCallBuilder setDocumentation(String doc) {
		if (Strings.isEmpty(doc)) {
			getSarlProtocolCall().eAdapters().removeIf(new Predicate<Adapter>() {
				public boolean test(Adapter adapter) {
					return adapter.isAdapterForType(DocumentationAdapter.class);
				}
			});
		} else {
			DocumentationAdapter adapter = (DocumentationAdapter) EcoreUtil.getExistingAdapter(
					getSarlProtocolCall(), DocumentationAdapter.class);
			if (adapter == null) {
				adapter = new DocumentationAdapter();
				getSarlProtocolCall().eAdapters().add(adapter);
			}
			adapter.setDocumentation(doc);
		}
		return this;
	}

	/**
	 * @see AbstractMemberBuilderFragment.java : appendTo : 1635
	 */
	@Override
	@Pure
	public String toString() {
		return EmfFormatter.objToStr(getSarlProtocolCall());
	}

	/** Add a parameter of type {@code io.sarl.lang.sarl.SarlProtocolParameter}.
	 * @param name the name of the parameter
	 * @return the builder for the parameter, never {@code null}.
	 * @see AbstractMemberBuilderFragment.java : appendTo : 1791
	 */
	public ISarlProtocolParameterBuilder addParameter(String name) {
		ISarlProtocolParameterBuilder builder = this.sarlProtocolParameterBuilderProvider.get();
		builder.eInit(this.sarlProtocolCall, name, getTypeResolutionContext());
		if (!(this.sarlProtocolCall instanceof XtendTypeDeclaration)) {
			this.sarlProtocolCall.getParameters().add(builder.getSarlProtocolParameter());
		}
		return builder;

	}

}

